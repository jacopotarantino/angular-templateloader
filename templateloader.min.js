!function(angular){"use strict";angular.module("angular-templateloader",[]).factory("templateLoader",["$http","$templateCache","$q","$log",function($http,$templateCache,$q,$log){function TemplateLoader(){}function _checkOptionsHasCorrectType(options){if(!options)throw new Error("templateLoader expects a string, array or options hash as an input.");if(options.constructor===Object&&!options.files)throw new Error("templateLoader expects an options hash to contain a list of files.");if(options.constructor===Array&&0===options.length)throw new Error("templateLoader expects arrays to contain strings referring to files.")}function _mergeOptionsIntoDefaults(options){var filesHash,defaults={files:[],async:!0};return"string"==typeof options&&defaults.files.push(options),options.constructor===Array&&(defaults.files=options),options.constructor===Object&&angular.extend(defaults,options),defaults.files.constructor===Array&&(filesHash={},angular.forEach(defaults.files,function(url){filesHash[url]=url}),defaults.files=filesHash),defaults}function _getSingleTemplate(name,templateURL){return $http.get(templateURL).success(function(data){$templateCache.put(name,data)}).error(function(data,status){$log.error("A template failed to load with status: "+status)})}function _loadSyncTemplates(files,deferred){var keys=Object.keys(files);return 0===keys.length?deferred.resolve():void _getSingleTemplate(keys[0],files[keys[0]]).success(function(){delete files[keys[0]],_loadSyncTemplates(files,deferred)})}return TemplateLoader.prototype.load=function(config){var deferred=$q.defer(),loadedTemplates=0;_checkOptionsHasCorrectType(config);var options=_mergeOptionsIntoDefaults(config);return options.async?angular.forEach(options.files,function(url,name){_getSingleTemplate(name,url).success(function(){loadedTemplates++,loadedTemplates===options.files.length&&deferred.resolve()}).error(function(){deferred.reject()})}):_loadSyncTemplates(options.files,deferred),deferred.promise},new TemplateLoader}])}(window.angular);